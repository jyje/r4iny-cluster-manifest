- name: Preset
  hosts: all
  tasks:
  - name: Import configuration
    delegate_to: localhost
    include_vars:
      name: config 
      file: "{{ playbook_dir }}/../config.yaml"


- name: Ensure specific strings are in /boot/cmdline.txt
  hosts: cluster
  gather_facts: false
  become: true
  vars:
    required_lines:
      - 'cgroup_memory=1'
      - 'cgroup_enable=cpuset'
      - 'cgroup_enable=memory'

  tasks:
  - name: Read existing /boot/cmdline.txt
    ansible.builtin.slurp:
      src: /boot/cmdline.txt
    register: slurped_file

  - name: Decode the base64 encoded content
    set_fact:
      cmdline_content: "{{ slurped_file['content'] | b64decode }}"
  
  - name: Add the string to /boot/cmdline.txt if not present
    ansible.builtin.lineinfile:
      path: /boot/cmdline.txt
      line: "{{ cmdline_content + ' ' + item }}"
      state: present
    loop: "{{ required_lines }}"
    when: item not in cmdline_content


- name: Install MicroK8s on Cluster Nodes
  hosts: cluster
  gather_facts: false
  become: true
  tasks:
  - name: Install snapd
    apt:
      name: snapd
      update_cache: true
      state: present

  - name: Uninstall old MicroK8s
    shell: sudo snap remove microk8s
    ignore_errors: true

  - name: Install MicroK8s
    shell: "sudo snap install microk8s --classic --channel={{ config.microk8s.version }}/stable"
    register: microk8s_installation
    changed_when: microk8s_installation.stdout.find('installed') != -1

  - name: Add local user to microk8s group
    user:
      name: r4iny
      groups: microk8s
      append: true


- name: Join nodes to the cluster
  hosts: cluster
  gather_facts: false
  serial: 1
  tasks:
  - name: "Join {{ inventory_hostname }} node"
    when: inventory_hostname != groups['cluster'][0]
    block:
    - name: "Get join command from head node"
      shell: echo "/snap/bin/$(/snap/bin/microk8s add-node | grep 'microk8s join' | head -n 1)"
      register: join_node_command
      delegate_to: "{{ groups['cluster'][0] }}"

    - name: Join each node to the cluster
      shell: "{{ join_node_command.stdout }}"


- name: Set kubeconfig for bootstrap
  hosts: cluster
  gather_facts: false
  tasks:
  - name: Get kubeconfig from head node
    run_once: true
    block:
    - name: Read kubeconfig from head node
      delegate_to: "{{ groups['cluster'][0] }}"
      shell: /snap/bin/microk8s config
      register: kubeconfig

    - name: Ensure destination directory exists
      delegate_to: localhost
      file:
        path: "$HOME/.kube/kubeconfigs"
        state: directory
        mode: 0755

    - name: Copy kubeconfig to bootstrap
      delegate_to: localhost
      copy:
        content: "{{ kubeconfig.stdout }}"
        dest: "$HOME/.kube/kubeconfigs/r4spi.kubeconfig"
        mode: 0600

    - name: Check if $HOME/.kube/config exists
      delegate_to: localhost
      stat:
        path: "$HOME/.kube/config"
      register: kubeconfig_file

    - name: Merge kubeconfig to bootstrap if the config exists
      delegate_to: localhost
      shell: kubectl konfig merge $HOME/.kube/kubeconfigs/r4spi.kubeconfig $HOME/.kube/kubeconfigs/config > $HOME/.kube/config
      when: kubeconfig_file.stat.exists

    - name: Copy kubeconfig to bootstrap if the config does not exist
      delegate_to: localhost
      copy:
        content: "{{ kubeconfig.stdout }}"
        dest: "$HOME/.kube/config"
        mode: 0600
      when: not kubeconfig_file.stat.exists


- name: Enable microk8s addons
  hosts: cluster
  gather_facts: false
  serial: 1
  tasks:
  - name: Enable microk8s addons on the head node
    when: inventory_hostname == groups['cluster'][0]
    delegate_to: "{{ groups['cluster'][0] }}"
    shell: /snap/bin/microk8s enable {{ item }}
    loop: "{{ config.microk8s.addons }}"
